const Discord = require("discord.js");
const oyun = require("../../models/game");
module.exports = {
	conf: {
		name: "cf",
		usage: "cf <bahis>",
		category: "Global",
		description:
			"Para Ã§evirirsiniz kazanÄ±rsanÄ±z oynadÄ±ÄŸÄ±nÄ±z paranÄ±n 2 katÄ±nÄ± alÄ±rsÄ±nÄ±z.",
		aliases: ["cf"],
	},

	async run(client, message, args) {
		const row = new Discord.ActionRowBuilder().addComponents(
			new Discord.ButtonBuilder()
				.setCustomId("acc-create")
				.setLabel("Hesap OluÅŸtur")
				.setStyle(Discord.ButtonStyle.Primary),
		);
		oyun.findOne({ userID: message.author.id }, async (err, res) => {
			if (!res) {
				let msg = await message.reply({
					content: `Hey! Dur biraz, oyunlarÄ±mÄ±zÄ± oynayabilmen iÃ§in ilk Ã¶nce kendi banka hesabÄ±nÄ± oluÅŸturman gerekiyor. AÅŸaÄŸÄ±daki butona tÄ±klayarak hesap oluÅŸturabilirsin.`,
					components: [row],
				});
				var filter = (interaction) =>
					interaction.user.id === message.author.id;
				const collector = msg.createMessageComponentCollector({
					filter,
					time: 60000,
				});

				collector.on("collect", async (interaction) => {
					if (interaction.customId == "acc-create") {
						row.components[0].setDisabled(true);
						msg.edit({ components: [row] });
						let newBankProfile = new oyun({
							userID: message.author.id,
							money: 150,
						});
						await newBankProfile.save().catch();
						interaction.reply({
							content: `BaÅŸarÄ±yla hesabÄ±nÄ± oluÅŸturdum. OyunlarÄ±mÄ±zÄ± oynaman iÃ§in **150** hediye para kazandÄ±n. Tabii bu miktarÄ± oyunlarÄ± oynayarak katlayabilirsin`,
						});
					}
				});
				collector.on("end", async (interaction) => {
					row.components[0].setDisabled(true);
					msg.edit({ components: [row] });
				});
			} else {
				let betCoin = Number(args[0]);
				if (args[0] === "all") {
					if (res.money >= 50000) betCoin = 50000;
					if (res.money < 50000) betCoin = res.money;
					if (res.money < 1)
						return message.reply({ content: "HiÃ§ paran yok!" });
				}
				//betCoin = betCoin.toFixed(0);
				if (isNaN(betCoin))
					return message.reply({
						content: "Harf yerine sayÄ± girmelisin!",
					});
				if (!res.money)
					return message.reply({ content: "HiÃ§ paran yok!" });
				if (betCoin > 50000)
					return message.reply({
						content: "Maksimum 50.000'lik bir bahis koyabilirsin!",
					});
				if (res.money < betCoin)
					return message.reply({
						content: `BelirttiÄŸin miktarda paran yok! BelirttiÄŸin miktarda para ile oynayabilmek iÃ§in \`${
							betCoin - res.money
						}\` daha paraya ihtiyacÄ±n var. Para sayÄ±n (**${
							res.money
						}** para)`,
					});
				let mesaj = await message.reply({
					content: `
**${
						message.author.username
					}** :dollar: ${betCoin} para harcadÄ± \nPara dÃ¶nÃ¼yor... ${client.emojis.cache.find(
						(x) => x.name === client.settings.emojis.CoinFlip,
					)}
`,
				});

				setTimeout(async () => {
					const chance = ["Tebrikler", "Kaybettin"];
					const canWin =
						chance[Math.floor(Math.random() * chance.length)];

					if (canWin == "Tebrikler") {
						res.money += betCoin * 2 - betCoin;
						await res.save();
						mesaj.edit({
							content: `
**${
								message.author.username
							}** :dollar: ${betCoin} para harcadÄ± \nPara dÃ¶nÃ¼yor... ${client.emojis.cache.find(
								(x) => x.name === client.settings.emojis.Coin,
							)} ve ðŸ’¸ **${betCoin * 2}** kazandÄ±n
`,
						});
					} else {
						res.money -= betCoin;
						await res.save();
						mesaj.edit({
							content: `
**${
								message.author.username
							}** :dollar: ${betCoin} para harcadÄ± \nPara dÃ¶nÃ¼yor... ${client.emojis.cache.find(
								(x) => x.name === client.settings.emojis.Coin,
							)} ve paranÄ±n hepsini kaybettin... :c`,
						});
					}
				}, 2000);
			}
		});
	},
};
